From a661096499c5008f7d0d57419209efe46bd3fd80 Mon Sep 17 00:00:00 2001
From: flymyao <flymyao@gmail.com>
Date: Wed, 30 Jan 2013 17:43:39 +0800
Subject: [PATCH 4/6] the error of get access token

---
 .../samplesocial/oauth/OAuthServiceHelper.java     |  115 ++++++++++++++++++++
 .../samplesocial/service/GithubAuthService.java    |    1 +
 .../samplesocial/service/GithubService.java        |   59 ++++++++++
 .../britesnow/samplesocial/web/GitHubHandlers.java |    3 +
 .../britesnow/samplesocial/web/OauthHandlers.java  |    3 +-
 src/main/webapp/WEB-INF/snow.properties            |   13 ++-
 6 files changed, 189 insertions(+), 5 deletions(-)
 create mode 100644 src/main/java/com/britesnow/samplesocial/oauth/OAuthServiceHelper.java
 create mode 100644 src/main/java/com/britesnow/samplesocial/service/GithubService.java

diff --git a/src/main/java/com/britesnow/samplesocial/oauth/OAuthServiceHelper.java b/src/main/java/com/britesnow/samplesocial/oauth/OAuthServiceHelper.java
new file mode 100644
index 0000000..f617ae5
--- /dev/null
+++ b/src/main/java/com/britesnow/samplesocial/oauth/OAuthServiceHelper.java
@@ -0,0 +1,115 @@
+package com.britesnow.samplesocial.oauth;
+
+import java.util.Map;
+
+import org.scribe.builder.ServiceBuilder;
+import org.scribe.builder.api.FacebookApi;
+import org.scribe.builder.api.LinkedInApi;
+import org.scribe.oauth.OAuthService;
+
+import com.britesnow.samplesocial.oauth.api.GitHubApi;
+import com.britesnow.samplesocial.oauth.api.GoogleApi20;
+import com.britesnow.snow.web.binding.ApplicationProperties;
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+
+@Singleton
+public class OAuthServiceHelper {
+    private final Map appconfig;
+
+    public static final String EMAIL_ENDPOINT = "https://www.googleapis.com/userinfo/email";
+    public static final String PROFILE_ENDPOINT = "https://www.googleapis.com/oauth2/v1/userinfo";
+
+    @Inject
+    public OAuthServiceHelper(@ApplicationProperties Map appConfig) {
+        this.appconfig = appConfig;
+    }
+
+    public OAuthService getOauthService(ServiceType serviceType) {
+        OAuthService oauthService = null;
+        if (serviceType == ServiceType.Google) {
+            oauthService = this.getGoogleOAuthService();
+        }else if(serviceType == ServiceType.FaceBook){
+            oauthService = this.getFaceBookOAuthService();
+        }else if(serviceType == ServiceType.LinkedIn){
+            oauthService = this.getLinkedInOAuthService();
+        }else if(serviceType == ServiceType.SalesForce){
+            oauthService = this.getSalesForceOAuthService();
+        }else if(serviceType == ServiceType.Github){
+            oauthService = this.getGitHubOAuthService();
+        }
+        
+        return oauthService;
+    }
+    
+    private OAuthService getGoogleOAuthService(){
+        String prefix = "google";
+        String clientId = (String) appconfig.get(prefix+".client_id");
+        String secret = (String) appconfig.get(prefix+".secret");
+        String callback = (String) appconfig.get(prefix+".callback");
+        String scope = (String) appconfig.get(prefix+".scope");
+        ServiceBuilder builder = new ServiceBuilder().provider(GoogleApi20.class).apiKey(clientId).apiSecret(secret);
+        //builder.grantType(OAuthConstants.GRANT_TYPE_AUTHORIZATION_CODE);
+        if (callback != null) {
+            builder.callback(callback);
+        }
+        if (scope != null) {
+            builder.scope(scope);
+        }
+        return builder.build();
+    }
+    
+    private OAuthService getFaceBookOAuthService(){
+        String prefix = "facebook";
+        String clientId = (String) appconfig.get(prefix+".apiKey");
+        String secret = (String) appconfig.get(prefix+".apiSecret");
+        String callback = (String) appconfig.get(prefix+".callBackUrl");
+        String scope =  "publish_actions";
+        ServiceBuilder builder = new ServiceBuilder().provider(FacebookApi.class).apiKey(clientId).apiSecret(secret).scope(scope).callback(callback);
+        return builder.build();
+    }
+    
+    private OAuthService getLinkedInOAuthService(){
+        String prefix = "linkedin";
+        String clientId = (String) appconfig.get(prefix+".client_id");
+        String secret = (String) appconfig.get(prefix+".secret");
+        String callback = (String) appconfig.get(prefix+".callback");
+        String scope = (String) appconfig.get(prefix+".scope");
+        ServiceBuilder builder = new ServiceBuilder().provider(LinkedInApi.class).apiKey(clientId).apiSecret(secret);
+        //builder.grantType(OAuthConstants.GRANT_TYPE_AUTHORIZATION_CODE);
+        if (callback != null) {
+            builder.callback(callback);
+        }
+        if (scope != null) {
+            builder.scope(scope);
+        }
+        return builder.build();
+    }
+    
+    private OAuthService getSalesForceOAuthService(){
+        String prefix = "salesforce";
+        String clientId = (String) appconfig.get(prefix+".apiKey");
+        String secret = (String) appconfig.get(prefix+".apiSecret");
+        String callback = (String) appconfig.get(prefix+".callbackUrl");
+        ServiceBuilder builder = new ServiceBuilder().provider(FacebookApi.class).apiKey(clientId).apiSecret(secret).callback(callback);
+        return builder.build();
+    }
+    
+    private OAuthService getGitHubOAuthService(){
+        String prefix = "github";
+        String clientId = (String) appconfig.get(prefix+".client_id");
+        String secret = (String) appconfig.get(prefix+".secret");
+        String callback = (String) appconfig.get(prefix+".callback");
+        String scope = (String) appconfig.get(prefix+".scope");
+        ServiceBuilder builder = new ServiceBuilder().provider(GitHubApi.class).apiKey(clientId).apiSecret(secret);
+        //builder.grantType(OAuthConstants.GRANT_TYPE_AUTHORIZATION_CODE);
+        if (callback != null) {
+            builder.callback(callback);
+        }
+        if (scope != null) {
+            builder.scope(scope);
+        }
+        return builder.build();
+    }
+
+}
diff --git a/src/main/java/com/britesnow/samplesocial/service/GithubAuthService.java b/src/main/java/com/britesnow/samplesocial/service/GithubAuthService.java
index e4e78e5..f3fa7ca 100644
--- a/src/main/java/com/britesnow/samplesocial/service/GithubAuthService.java
+++ b/src/main/java/com/britesnow/samplesocial/service/GithubAuthService.java
@@ -49,6 +49,7 @@ public class GithubAuthService implements AuthService {
     public boolean updateAccessToken(String verifierCode, long userId) throws IOException {
         Verifier verifier = new Verifier(verifierCode);
         Token accessToken = oAuthService.getAccessToken(EMPTY_TOKEN, verifier);
+        System.out.println(accessToken.getRawResponse()+verifierCode+" "+userId);
         if (accessToken.getToken() != null) {
             //get userinfo
             GitHubClient client = new GitHubClient();
diff --git a/src/main/java/com/britesnow/samplesocial/service/GithubService.java b/src/main/java/com/britesnow/samplesocial/service/GithubService.java
new file mode 100644
index 0000000..3a33bb2
--- /dev/null
+++ b/src/main/java/com/britesnow/samplesocial/service/GithubService.java
@@ -0,0 +1,59 @@
+package com.britesnow.samplesocial.service;
+
+import static org.scribe.model.OAuthConstants.EMPTY_TOKEN;
+
+import java.util.Map;
+
+import org.scribe.model.OAuthRequest;
+import org.scribe.model.Response;
+import org.scribe.model.Token;
+import org.scribe.model.Verb;
+import org.scribe.model.Verifier;
+import org.scribe.oauth.OAuthService;
+
+import com.britesnow.samplesocial.entity.SocialIdEntity;
+import com.britesnow.samplesocial.entity.User;
+import com.britesnow.samplesocial.oauth.OAuthServiceHelper;
+import com.britesnow.samplesocial.oauth.ServiceType;
+import com.britesnow.snow.web.binding.ApplicationProperties;
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+
+@Singleton
+public class GithubService {
+	private final Map appConfig;
+
+	private static String TOKEN_URL = "https://github.com/login/oauth/access_token";
+
+	@Inject
+	private YaoGithubAuthService yaoGithubAuthService;
+
+	private OAuthService oAuthService;
+
+	@Inject
+	public GithubService(@ApplicationProperties Map appConfig,OAuthServiceHelper oauthServiceHelper) {
+		this.appConfig = appConfig;
+		oAuthService = oauthServiceHelper
+				.getOauthService(ServiceType.Github);
+	}
+
+	public Token getToken(User user) {
+		SocialIdEntity soId = yaoGithubAuthService.getSocialIdEntity(user
+				.getId());
+		return new Token(soId.getToken(), soId.getSecret());
+	}
+
+	private OAuthRequest createRequest(Verb verb, String url) {
+		OAuthRequest request = new OAuthRequest(verb, url);
+		 request.addHeader("x-li-format","json");
+		return request;
+	}
+
+	public String getUserInfo(User user, String code) {
+		OAuthRequest request = createRequest(Verb.POST, TOKEN_URL);
+		 Verifier verifier = new Verifier(code);
+	     Token accessToken = oAuthService.getAccessToken(EMPTY_TOKEN, verifier);
+		System.out.println( accessToken.getToken());
+		return null;
+	}
+}
diff --git a/src/main/java/com/britesnow/samplesocial/web/GitHubHandlers.java b/src/main/java/com/britesnow/samplesocial/web/GitHubHandlers.java
index 3517df0..1ebc596 100644
--- a/src/main/java/com/britesnow/samplesocial/web/GitHubHandlers.java
+++ b/src/main/java/com/britesnow/samplesocial/web/GitHubHandlers.java
@@ -2,8 +2,10 @@ package com.britesnow.samplesocial.web;
 
 import java.io.IOException;
 
+import com.britesnow.samplesocial.entity.User;
 import com.britesnow.samplesocial.service.YaoGithubAuthService;
 import com.britesnow.snow.web.RequestContext;
+import com.britesnow.snow.web.param.annotation.WebUser;
 import com.britesnow.snow.web.rest.annotation.WebGet;
 import com.google.inject.Inject;
 import com.google.inject.Singleton;
@@ -18,4 +20,5 @@ public class GitHubHandlers {
 	public void auth(RequestContext rc) throws IOException{
 		  rc.getRes().sendRedirect(yaoGithubAuthService.getAuthorizationUrl());
 	}
+	
 }
diff --git a/src/main/java/com/britesnow/samplesocial/web/OauthHandlers.java b/src/main/java/com/britesnow/samplesocial/web/OauthHandlers.java
index fdbd083..d25cb38 100644
--- a/src/main/java/com/britesnow/samplesocial/web/OauthHandlers.java
+++ b/src/main/java/com/britesnow/samplesocial/web/OauthHandlers.java
@@ -14,6 +14,7 @@ import com.britesnow.samplesocial.entity.User;
 import com.britesnow.samplesocial.oauth.OAuthUtils;
 import com.britesnow.samplesocial.service.FacebookAuthService;
 import com.britesnow.samplesocial.service.GithubAuthService;
+import com.britesnow.samplesocial.service.GithubService;
 import com.britesnow.samplesocial.service.GoogleAuthService;
 import com.britesnow.samplesocial.service.LinkedInAuthService;
 import com.britesnow.samplesocial.service.SalesForceAuthService;
@@ -58,6 +59,7 @@ public class OauthHandlers {
         }else if (service == Service.Github) {
             url = githubAuthService.getAuthorizationUrl();
         }
+        
         rc.getRes().sendRedirect(url);
     }
 
@@ -96,7 +98,6 @@ public class OauthHandlers {
         }
     }
 
-
     @WebModelHandler(startsWith="/github_callback")
     public void githubCallback(RequestContext rc,@WebUser User user,  @WebParam("code") String code) throws Exception {
         System.out.println("XXXXXXXXXXXXXXXXXXXXXX");
diff --git a/src/main/webapp/WEB-INF/snow.properties b/src/main/webapp/WEB-INF/snow.properties
index e6cc0d9..6e75435 100644
--- a/src/main/webapp/WEB-INF/snow.properties
+++ b/src/main/webapp/WEB-INF/snow.properties
@@ -3,10 +3,15 @@ snow.webApplicationModules=com.britesnow.samplesocial.SSConfig
 
 # PostgreSQL Hibernate Config
 hibernate.connection.driver_class = org.postgresql.Driver
-hibernate.connection.url=jdbc:postgresql://127.0.0.1:5432/samplesocial
+hibernate.connection.url=jdbc:postgresql://192.168.10.22:5432/samplesocial
 hibernate.default_schema = samplesocial
+<<<<<<< Updated upstream
 hibernate.connection.username=samplesocial
 hibernate.connection.password=welcome
+=======
+hibernate.connection.username= postgres
+hibernate.connection.password= 123456
+>>>>>>> Stashed changes
 hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
 hibernate.hbm2ddl.auto = update
 
@@ -47,10 +52,10 @@ salesforce.callbackUrl = http://localhost:8080/samplesocial/salesforce_callback
 
 #github config
 
-github.client_id = c6ca9a8d7cec52d9e5cf
-github.secret = 7ee809302bade62fd73282265b02a9d95f623b02
+github.client_id = a1d0aa01c25a64a46d99
+github.secret = 3b7036d30aa4c2c02aa49378af69f82efc83cded
 github.callback = http://localhost:8080/samplesocial/github_callback
-github.scope = repo,user
+github.scope = public_repo
 
 #import sql
 task.classes=com.britesnow.samplesocial.task.AntExecSqlTask
-- 
1.7.5.1

